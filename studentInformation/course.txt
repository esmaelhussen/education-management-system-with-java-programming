package program;
import java.util.ArrayList;
import java.util.Scanner;



class Course {
    private String courseCode;
    private String courseTitle;
    private int ects;
    private String instructorName;
    private ArrayList<StudentMarks> studentMarksList;

    private double assignment;
    private double test1;
    private double test2;
    private double project;
    private double midTerm;
    private double finalTerm;

    public Course(String courseCode, String courseTitle, int ects, String instructorName) {
        this.courseCode = courseCode;
        this.courseTitle = courseTitle;
        this.ects = ects;
        this.instructorName = instructorName;
        this.studentMarksList = new ArrayList<>();
    }

    public String getCourseCode() {
        return courseCode;
    }

    public String getCourseTitle() {
        return courseTitle;
    }

    public int getECTS() {
        return ects;
    }

    public String getInstructorName() {
        return instructorName;
    }

    public void addStudentMarks(String studentId, double assignment, double test1, double test2, double project, double midTerm, double finalTerm) {
        this.assignment = assignment;
        this.test1 = test1;
        this.test2 = test2;
        this.project = project;
        this.midTerm = midTerm;
        this.finalTerm = finalTerm;

        StudentMarks studentMarks = new StudentMarks(studentId, assignment, test1, test2, project, midTerm, finalTerm);
        studentMarksList.add(studentMarks);
    }
    public void displayCourseList(ArrayList<Course> courses) {
        System.out.println("\nCourse List:");
        System.out.format("%-15s%-25s%-5s%-20s%-8s%-8s%-8s%-8s%-8s%-8s%-10s%-10s%-8s%n", 
                "Course Code", "Course Title", "ECTS", "Instructor", "Assignment", "Test 1", "Test 2", "Project", "Midterm", "Finalterm", "Grade", "EQ", "Grade");
        System.out.println("-------------------------------------------------------------------------------------------------------------------------------");
        double totalMarks = 0;
        double totalEQ = 0;
        double totalCredits = 0;
        for (Course course : courses) {
            // Calculate total mark
            double totalMark = course.getAssignment() + course.getTest1() + course.getTest2() +
                               course.getProject() + course.getMidTerm() + course.getFinalTerm();
            
            // Calculate grade point
            double gradePoint = calculateGradePoint((int)totalMark);
            
            // Calculate equivalent grade (EQ)
            double eq = gradePoint;
            totalEQ += eq;

            // Calculate total marks
            totalMarks += totalMark;

            // Calculate semester GPA
            double semesterGPA = totalMarks / courses.size();

            // Calculate cumulative GPA
            totalCredits += course.getECTS();
            double cumulativeGPA = totalEQ / totalCredits;

            // Calculate grade number
            int gradeNumber = calculateGradeNumber(semesterGPA);

            // Calculate grade character
            char gradeCharacter = calculateGradeCharacter(gradeNumber);

            System.out.format("%-15s%-25s%-5d%-20s%-8.2f%-8.2f%-8.2f%-8.2f%-8.2f%-8.2f%-10d%-10.2f%-8c%n",
                    course.getCourseCode(), course.getCourseTitle(), course.getECTS(), course.getInstructorName(),
                    course.getAssignment(), course.getTest1(), course.getTest2(), course.getProject(), 
                    course.getMidTerm(), course.getFinalTerm(), (int)totalMark, eq, gradeCharacter);
        }
        System.out.println("-------------------------------------------------------------------------------------------------------------------------------");
        System.out.println("Total Marks: " + totalMarks);
        System.out.println("Semester GPA: " + (totalMarks / courses.size()));
        System.out.println("Cumulative GPA: " + (totalEQ / totalCredits));
    }

    // Define methods to calculate grade number, grade character, and grade point
    private int calculateGradeNumber(double semesterGPA) {
        if (semesterGPA >= 4.0) {
            return 10;
        } else if (semesterGPA >= 3.5) {
            return 9;
        } else if (semesterGPA >= 3.0) {
            return 8;
        } else if (semesterGPA >= 2.5) {
            return 7;
        } else if (semesterGPA >= 2.0) {
            return 6;
        } else if (semesterGPA >= 1.5) {
            return 5;
        } else if (semesterGPA >= 1.0) {
            return 4;
        } else {
            return 0;
        }
    }

    private char calculateGradeCharacter(int gradeNumber) {
        switch (gradeNumber) {
            case 10:
                return 'A';
            case 9:
                return 'B';
            case 8:
                return 'C';
            case 7:
                return 'D';
            case 6:
                return 'E';
            case 5:
                return 'P';
            case 4:
                return 'F';
            default:
                return 'X'; // 'X' indicates failure or incomplete
        }
    }

    private double calculateGradePoint(int mark) {
        if (mark >= 90) {
            return 4.0;
        } else if (mark >= 80) {
            return 3.5;
        } else if (mark >= 70) {
            return 3.0;
        } else if (mark >= 60) {
            return 2.5;
        } else if (mark >= 50) {
            return 2.0;
        } else if (mark >= 40) {
            return 1.5;
        } else if (mark >= 30) {
            return 1.0;
        } else {
            return 0.0;
        }
    }

    
    public void displayStudentMarks(String studentId) {
        for (StudentMarks studentMarks : studentMarksList) {
            if (studentMarks.getStudentId().equals(studentId)) {
                System.out.println("\nStudent Marks for Course " + courseCode + ":");
                System.out.println("Assignment: " + studentMarks.getAssignment());
                System.out.println("Test 1: " + studentMarks.getTest1());
                System.out.println("Test 2: " + studentMarks.getTest2());
                System.out.println("Project: " + studentMarks.getProject());
                System.out.println("Mid-term: " + studentMarks.getMidTerm());
                System.out.println("Final-term: " + studentMarks.getFinalTerm());
                return;
            }
        }
        System.out.println("Student not found in this course!");
    }

    public double getAssignment() {
        return assignment;
    }

    public double getTest1() {
        return test1;
    }

    public double getTest2() {
        return test2;
    }

    public double getProject() {
        return project;
    }

    public double getMidTerm() {
        return midTerm;
    }

    public double getFinalTerm() {
        return finalTerm;
    }
}

class StudentMarks {
    private String studentId;
    private double assignment;
    private double test1;
    private double test2;
    private double project;
    private double midTerm;
    private double finalTerm;

    public StudentMarks(String studentId, double assignment, double test1, double test2, double project, double midTerm, double finalTerm) {
        this.studentId = studentId;
        this.assignment = assignment;
        this.test1 = test1;
        this.test2 = test2;
        this.project = project;
        this.midTerm = midTerm;
        this.finalTerm = finalTerm;
    }

    public String getStudentId() {
        return studentId;
    }

    public double getAssignment() {
        return assignment;
    }

    public double getTest1() {
        return test1;
    }

    public double getTest2() {
        return test2;
    }

    public double getProject() {
        return project;
    }

    public double getMidTerm() {
        return midTerm;
    }

    public double getFinalTerm() {
        return finalTerm;
    }
}